# ====================== PATH CONFIGS HERE ======================
# If possible set in .zprofile for configs and path not here
# ====================== PATH CONFIGS HERE ======================

# ====================== ZSH CONFIGS AND MINIMUM CONFIGS ======================
# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download zinit, if it's not there yet
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"

# source and load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Load starship theme
# line 1: `starship` binary as command, from github release
# line 2: starship setup at clone(create init.zsh, completion)
# line 3: pull behavior same as clone, source init.zsh
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit light starship/starship

# ZSH PLUGINS
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# ADD IN SNIPPETS
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::dirhistory
# zinit snippet OMZP::macos # Only on macos machines some directories not working
zinit snippet OMZP::aws
# zinit snippet OMZP::docker # some directories not working
zinit snippet OMZP::docker-compose
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx
zinit snippet OMZP::command-not-found

# LOAD COMPLETIONS
autoload -U compinit && compinit
zinit cdreplay -q

# BINARY SHELL INTEGRATIONS (NEED TO BE INSTALLED IN SYSTEM)
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
eval "$(zoxide init --cmd cd zsh)" # overwrites cd

# KEYBINDS
bindkey -e
# Make history related to commands
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# HISTORY
HISTSIZE=10000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space # useful if you want to input sensitive data, prepend with space and continue cmd
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completion Styling
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Defaults
export EDITOR="nvim"
# ====================== ZSH CONFIGS AND MINIMUM CONFIGS ======================

# ====================== ALIAS ======================
alias chz="chezmoi"
alias chza="chezmoi apply"
alias chzd="chezmoi diff"
alias chze="chezmoi edit"
alias chzr="chezmoi re-add"

alias l="eza -F --icons=always"
alias ll="eza -F -l --icons=always --group-directories-first"
alias llt="eza -F -l --icons=always --group-directories-first --sort=time"
alias tree="eza -F --tree --icons=always"

# Node module Deletions
alias "cmd:nm-del"="find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +"
alias "cmd:nm-show"="find . -name 'node_modules' -type d -prune"
alias "cmd:npkill"="npx npkill"

# Editors
alias nv="nvim"
alias emc='emacs'
alias emcn='emacs -nw'

# toolchains
alias nvl='NVIM_APPNAME="nvim_legacy" nvim'
alias cat='bat --style=header,grid'
alias lg="lazygit"
alias ff="fastfetch"
alias air="~/go/bin/air"
alias "py3"="python3"
alias s="sesh"
# ====================== ALIAS ======================


# ====================== ADDITIONALS ======================
# Function to create a zip file excluding hidden files and __MACOSX
zipme() {
  if [ -n "$1" ] 
  then
    zip -r "$1.zip" . -x ".*" -x "__MACOSX" -x ".DS*"
  else
    zip -r "archive.zip" . -x ".*" -x "__MACOSX" -x ".DS*"
  fi
}

function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    # session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    # session=$(sesh list | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    session=$(
	    sesh list | fzf-tmux -p 55%,60% \
        --no-sort --ansi --border-label ' sesh ' --prompt '⚡  ' \
        --header '  ^a all ^t tmux ^g configs ^x zoxide ^d tmux kill ^f find' \
        --bind 'tab:down,btab:up' \
        --bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list)' \
        --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t)' \
        --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c)' \
        --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z)' \
        --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
        --bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(⚡  )+reload(sesh list)'
    )
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}

zle     -N             sesh-sessions
bindkey -M emacs '\eq' sesh-sessions
bindkey -M vicmd '\eq' sesh-sessions
bindkey -M viins '\eq' sesh-sessions


# NVM Config
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


# ELIXIR CONFIG
export ERL_AFLAGS="-kernel shell_history enabled"
export ELIXIR_ERL_OPTIONS="-kernel shell_history enabled"

# The next line enables shell command completion for gcloud.
if [ -f '/Users/edgarcoime/Documents/programming/projects/utils/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/edgarcoime/Documents/programming/projects/utils/google-cloud-sdk/completion.zsh.inc'; fi

# BUN COMPLETIONS
[ -s "/Users/edgarcoime/.bun/_bun" ] && source "/Users/edgarcoime/.bun/_bun"

# Bun
export BUN_INSTALL="/Users/edgarcoime/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# Doom emacs
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH=/Users/edgarcoime/.local/bin:$PATH

# pyenv config
[ -f "/Users/edgarcoime/.ghcup/env" ] && source "/Users/edgarcoime/.ghcup/env" # ghcup-env
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# pyenv to prevent brew warnings
alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'

# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/edgarcoime/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/Users/edgarcoime/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/Users/edgarcoime/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/edgarcoime/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<
