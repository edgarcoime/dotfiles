# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

fastfetch

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/edgarcoime/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# STARTUP SCRIPTS
# https://unix.stackexchange.com/questions/43601/how-can-i-set-my-default-shell-to-start-up-tmux
# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#   exec tmux
# fi

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    sudo
    dirhistory
    # zsh_reload
    zsh-syntax-highlighting
    zsh-autosuggestions
    k
)

source $ZSH/oh-my-zsh.sh
export PATH=$HOME/.tmux/plugins/t-smart-tmux-session-manager/bin:$PATH

# User configuration

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

############################### SHELL ENVIRONMENT VARS ###############################
# Compilation flags
# export ARCHFLAGS="-arch x86_64"
export EDITOR="nvim"
############################### SHELL ENVIRONMENT VARS ###############################

############################### ALIASES ###############################
# For a full list of active aliases, run `alias`.
# CHEZMOI
alias chz="chezmoi"
alias chza="chezmoi apply"
alias chzd="chezmoi diff"
alias chze="chezmoi edit"
alias chzr="chezmoi re-add"

# EZA
alias l="eza -F --icons=always"
alias ll="eza -F -l --icons=always --group-directories-first"
alias llt="eza -F -l --icons=always --group-directories-first --sort=time"
alias tree="eza -F --tree --icons=always"

alias cat='bat --style=header,grid'
alias ngrok='/Users/edgarcoime/development/ngrok'
alias emc='emacs'
alias emcn='emacs -nw'
alias lg="lazygit"

alias "cmd:nm-del"="find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +"
alias "cmd:nm-show"="find . -name 'node_modules' -type d -prune"
alias "cmd:npkill"="npx npkill"

alias "py3"="python3"
alias ff="fastfetch"
# alias "zipme"="zip -r cards.zip . -x \".*\" -x \"__MACOSX\""
alias nvl='NVIM_APPNAME="nvim_legacy" nvim'
############################### ALIASES ###############################


###### NVIM CONFIGS ########

# Must have NVIM CONFIGS folder in XDG_HOME .config
NVIM_CONFIG_FOLDER="nvim-configs"

alias nv="nvim"
# alias nvk="NVIM_APPNAME=${NVIM_CONFIG_FOLDER}/kickstart nvim"
# alias nvk='NVIM_APPNAME="nvim-kickstart" nvim'

function nvs() {
  items=("default" "kickstart")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)

  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  fi

  if [[ $config == "default" ]]; then
    nvim $@
  fi

  FULL_CONFIG_PATH="${NVIM_CONFIG_FOLDER}/${config}"
  NVIM_APPNAME=$FULL_CONFIG_PATH nvim $@
}

###### NVIM CONFIGS ########

# Functions
zipme() {
  if [ -n "$1" ] 
  then
    zip -r "$1.zip" . -x ".*" -x "__MACOSX"
  else
    zip -r "archive.zip" . -x ".*" -x "__MACOSX"
  fi
}

# Bookmarks functionality
if [ -d "$HOME/.bookmarks" ]; then
    export CDPATH=".:$HOME/.bookmarks:/"
    alias goto="cd -P"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# EXTENSIONS

# Zoxide config
eval "$(zoxide init zsh)"

# NVM Config
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/edgarcoime/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/edgarcoime/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/edgarcoime/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/edgarcoime/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# ELIXIR CONFIG
export ERL_AFLAGS="-kernel shell_history enabled"
export ELIXIR_ERL_OPTIONS="-kernel shell_history enabled"

# GHCI Haskell config
#[ -f "/Users/edgarcoime/.ghcup/env" ] && source "/Users/edgarcoime/.ghcup/env" # ghcup-env

# Starship prompt
eval "$(starship init zsh)"

# opam configuration
[[ ! -r /Users/edgarcoime/.opam/opam-init/init.zsh ]] || source /Users/edgarcoime/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/edgarcoime/Documents/programming/projects/utils/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/edgarcoime/Documents/programming/projects/utils/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/edgarcoime/Documents/programming/projects/utils/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/edgarcoime/Documents/programming/projects/utils/google-cloud-sdk/completion.zsh.inc'; fi

# bun completions
[ -s "/Users/edgarcoime/.bun/_bun" ] && source "/Users/edgarcoime/.bun/_bun"

# Bun
export BUN_INSTALL="/Users/edgarcoime/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# Doom emacs
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH=/Users/edgarcoime/.local/bin:$PATH

# Fzf config
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# pyenv config
[ -f "/Users/edgarcoime/.ghcup/env" ] && source "/Users/edgarcoime/.ghcup/env" # ghcup-env
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# pyenv to prevent brew warnings
alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
